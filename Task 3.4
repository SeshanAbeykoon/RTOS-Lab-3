//Configure to use 1 CPU Core
#if CONFIG_FREETOS_UNICORE
static const BaseType_t cpu = 0;
#else
static const BaseType_t cpu = 1;
#endif

void task1_input(void *param);
void task2_blink(void *param);
String blink_delay = "";
static SemaphoreHandle_t mutex;

void setup()
{
    pinMode(LED_BUILTIN, OUTPUT);             // Set LEDs as output
    Serial.begin(115200);                     // Serial monitor setup
    mutex = xSemaphoreCreateMutex();    // Create mutex before starting task

        //Task 1 Execution
        xTaskCreatePinnedToCore(
                task1_input,            //Calling task1 Function
                "Task1 - Input",        //Name of Task
                1024,                   //Stack Size
                NULL,                   //Function Parameters
                1,                      //Task Priority
                NULL,                   //Task Handle
                cpu);                   //Runs on 1 CPU Core

 //Task 2 Execution
        xTaskCreatePinnedToCore(
                task2_blink,            //Calling task2 Function
                "Task2 - Blink",        //Name of Task
                1024,                   //Stack Size
                NULL,                   //Function Parameters
                1,                      //Task Priority
                NULL,                   //Task Handle
                cpu);                   //Runs on 1 CPU Core

  // Delete "setup and loop" task
  
}
void loop()
{

}
//Functions
void task1_input(void *param){
  while(1){

    xSemaphoreTake(mutex, portMAX_DELAY);
    
    Serial.println("Enter delay in ms");
    while(Serial.available() == 0){}
    blink_delay = Serial.readString();
    Serial.print("Delay = ");
    Serial.println(blink_delay);

    xSemaphoreGive(mutex);
    vTaskDelete(NULL);
  }
}

void task2_blink(void *param){
  while(1){

    xSemaphoreTake(mutex, portMAX_DELAY);
    
    Serial.println("Task 2");
    digitalWrite(LED_BUILTIN, HIGH);
    vTaskDelay(blink_delay.toInt()/portTICK_PERIOD_MS);
    digitalWrite(LED_BUILTIN, LOW);
    vTaskDelay(blink_delay.toInt()/portTICK_PERIOD_MS);

    xSemaphoreGive(mutex);
    
  }
}
