// Use only core 1 for demo purposes
#if CONFIG_FREERTOS_UNICORE
static const BaseType_t app_cpu = 0;
#else
static const BaseType_t app_cpu = 1;
#endif

// Some string to print
const char msg[] = "Prioritization Task";
// Task handles3
static TaskHandle_t task_1 = NULL;
static TaskHandle_t task_2 = NULL;

// Task: print to Serial Terminal with lower priority
void startTask1(void *parameter) {
  // Count number of characters in string
  int msg_len = strlen(msg);
  // Print string to Terminal
  while (1) {
    Serial.println();
    for (int i = 0; i < msg_len; i++) {
      Serial.print(msg[i]);
    }
    Serial.println();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}
// Task: print to Serial Terminal with higher priority
void startTask2(void *parameter) {
  while (1) {
    Serial.print('*');
    vTaskDelay(100 / portTICK_PERIOD_MS);
  }
}

void setup(){
    pinMode(LED_BUILTIN, OUTPUT);		// Set LEDs as output
    // Serial monitor setup
    Serial.begin(115200);
   xTaskCreatePinnedToCore(startTask1, Task1 - Message",1024, NULL, 1,NULL, app_cpu); 
   xTaskCreatePinnedToCore(startTask2, Task2 - Asterisk",1024, NULL, 1,NULL, app_cpu);                   

   xTaskCreatePinnedToCore(
                startTask2,             //Calling task2 Function
                "Task2 - Asterisk",      //Name of Task
                1024,                   //Stack Size
                NULL,                   //Function Parameters
                2,                      //Task Priority
                NULL,                   //Task Handle
                app_cpu);                   //Runs on 1 CPU Core
}
void loop(){}
